const path = require('path')
const express = require('express')
const hbs = require('hbs')

const geocode = require('./utils/geocode')
const forecast = require('./utils/forecast')

const app = express()

// Define paths for Express config
const publicDirectoryPath = path.join(__dirname, '../public')
const viewsPath = path.join(__dirname, '../templates/views')
const partialsPath = path.join(__dirname, '../templates/partials')

// Setup handlebars engine and views location
app.set('view engine', 'hbs')
app.set('views', viewsPath)

hbs.registerPartials(partialsPath)

// Setup static directory to serve
app.use(express.static(publicDirectoryPath))

app.get('', (req, res) => {
    res.render('index', {
        title: 'Weather',
        name: 'Jona Contreras'
    })
})

// ABOUT
app.get('/about', (req, res) => {
    res.render('about', {
        title: 'About Me',
        name: 'Jona Contreras'
    })
})

// HELP
app.get('/help', (req, res) => {
    res.render('help', {
        helpTxt: 'This is a help message.',
        title: 'Help',
        name: 'Jona Contreras'
    })
})

// WEATHER
app.get('/weather', (req, res) => {

    if (!req.query.address) {
        return res.send({
            error: 'You must enter an Address to search.'
        })
    }

    // -----------------------------------------------------------------
    //                          CHALLENGE 08
    // -----------------------------------------------------------------
    //
    // Goal: WIRE-UP /weather
    //
    // 1. Require geocode/forecast into app.js
    // 2. Use the address to geocode
    // 3. Use the coordinates to get the forecast
    // 4. Send back the real forecast and location


    //geocode takes in 2 arguments,
    //the 2nd is the callback function (error, IN THIS CASE THE destructured object VERSION HERE)
    // before it was like data.latitude, data.longitude etc.
    // now because the property and value name are THE SAME, destructuring is possible
    geocode(req.query.address, (error, { latitude, longitude, location } = {}) => {
        if (error) {
            return res.send(error)
        }

        forecast(latitude, longitude, (error, forecastData) => {
            if (error) {
                return res.send(error)
            }

            res.send({
                address: req.query.address,
                location, // SEE HERE, DESTRUCTURING IS POSSIBLE because location: location
                forecast: forecastData
            })

        })
    })


})





// SAMPLE QUERY FOR PRODUCTS
app.get('/products', (req, res) => {
    if (!req.query.search) {
        return res.send({
            error: 'You must provide a search term.'
        })
    }


    console.log(req.query)
    console.log(req.query.search)

    res.send({
        products: []
    })
})

// 404 HELP ERROR
app.get('/help/*', (req, res) => {
    res.render('404', {
        title: '404 Help',
        name: 'Jona Contreras',
        errMsg: 'Help article not found'
    })
})

// GENERIC 404 ERROR
app.get('*', (req, res) => {
    res.render('404', {
        title: '404',
        name: 'Jona Contreras',
        errMsg: 'Page not found.'
    })
})

// SETUP PORT
app.listen(3000, () => {
    console.log('Server is up on port 3000.')
})